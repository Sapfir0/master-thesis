name: master-thesis

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v1

    - name: Build docker image and push it to the registry
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        docker build -t pdfbuilder .
        # Generate PDF artifacts
        docker run --rm -i -v ${PWD}:/master-thesis:Z pdfbuilder \
          bash -c "latexmk -xelatex -synctex=1 -jobname=master-thesis main.tex"

  deploy:
    runs-on: ubuntu-latest
    # Деплой будет только на ветке master. Закомментируйте, если не надо
    if: github.ref == 'refs/heads/master'
    # Можно зависеть от любого другого job. Порядок выполнения будет подстраиваться.
    needs: [build]
    steps:
      # Это хак, чтобы дергать bash-команды и запоминанать их результат
      - name: Variables
        # id используется внутренне: по нему можно ссылаться на результаты из другого step
        id: vars
        # echo в таком форматировании позволит впоследствии ссылаться на результаты через ${{ steps.<step_id>.outputs.<variable_name> }}
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d')"
          echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          # Тот самый ключ, который мы указывали в upload-artifact
          name: my_doc
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          # По офф.документации, надо указать GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
        with:
          # Берем результат из step с id=vars (см. выше). 
          # Получим теги вида “my_doc-<дата билда>-<первые 8 символов из sha коммита>
          tag_name: my_doc-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.sha8 }}
          # Имя, которое будет высвечиваться в релизе
          release_name: My Actions document (version ${{ steps.vars.outputs.date }})
          # Наш релиз не набросок и не пререлиз, так что оба в false
          draft: false
          prerelease: false
      # Прикладываемые файлы надо заливать отдельным step
      - name: Upload pdf asset
        uses: actions/upload-release-asset@v1
        env:
          # Тоже требуется токен
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Из предыдущего step с id=create_release генерится upload_url - по нему и надо заливать
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Не переходим в папку src, поскольку download-artifacts грузит в текущую директорию
          asset_path: ./master-thesis.pdf
          # Имя, которое будет высвечиваться в релизе
          asset_name: master-thesis.pdf
          asset_content_type: application/pdf